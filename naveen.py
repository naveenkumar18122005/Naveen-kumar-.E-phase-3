# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FFzs7vmkUY64iMQiM-bPi1fzg7sQXKNs
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

# 1. Load or create sample dataset
np.random.seed(42)
data = pd.DataFrame({
    'TimeOfDay': np.random.choice(['Morning', 'Afternoon', 'Evening', 'Night'], 1000),
    'Weather': np.random.choice(['Clear', 'Rain', 'Fog', 'Snow'], 1000),
    'RoadCondition': np.random.choice(['Dry', 'Wet', 'Icy'], 1000),
    'VehicleSpeed': np.random.randint(20, 120, 1000),
    'AccidentSeverity': np.random.choice(['Minor', 'Major', 'Fatal'], 1000)
})

# 2. Encode categorical variables
data_encoded = pd.get_dummies(data, columns=['TimeOfDay', 'Weather', 'RoadCondition'])

# 3. Prepare features and target
X = data_encoded.drop('AccidentSeverity', axis=1)
y = data['AccidentSeverity']

# 4. Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 5. Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# 6. Predictions and evaluation
y_pred = model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# 7. Plotting feature importance
feat_importances = pd.Series(model.feature_importances_, index=X.columns)
feat_importances.nlargest(10).plot(kind='barh', color='skyblue')
plt.title('Top 10 Feature Importances for Accident Severity Prediction')
plt.xlabel('Importance')
plt.tight_layout()
plt.show()

# 8. Visualize severity distribution
sns.countplot(data=data, x='AccidentSeverity', palette='Set2')
plt.title('Accident Severity Distribution')
plt.xlabel('Severity')
plt.ylabel('Count')
plt.show()